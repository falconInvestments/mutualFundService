function cov_1dbsadu8gt(){var path="C:\\Users\\SParker\\projects\\Capstone\\mutualFundsService\\controllers\\mutualFundController.js";var hash="57ee56f7eb714308d144f6377ef2a37fb166290c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\SParker\\projects\\Capstone\\mutualFundsService\\controllers\\mutualFundController.js",statementMap:{"0":{start:{line:1,column:11},end:{line:1,column:37}},"1":{start:{line:3,column:19},end:{line:3,column:33}},"2":{start:{line:6,column:22},end:{line:31,column:1}},"3":{start:{line:7,column:4},end:{line:30,column:5}},"4":{start:{line:8,column:25},end:{line:23,column:9}},"5":{start:{line:24,column:8},end:{line:24,column:52}},"6":{start:{line:25,column:27},end:{line:25,column:62}},"7":{start:{line:27,column:8},end:{line:27,column:41}},"8":{start:{line:29,column:8},end:{line:29,column:25}},"9":{start:{line:34,column:26},end:{line:42,column:1}},"10":{start:{line:35,column:4},end:{line:41,column:5}},"11":{start:{line:36,column:26},end:{line:36,column:54}},"12":{start:{line:37,column:8},end:{line:37,column:42}},"13":{start:{line:39,column:8},end:{line:39,column:55}},"14":{start:{line:40,column:8},end:{line:40,column:25}},"15":{start:{line:45,column:25},end:{line:55,column:1}},"16":{start:{line:46,column:4},end:{line:54,column:5}},"17":{start:{line:47,column:13},end:{line:47,column:29}},"18":{start:{line:49,column:22},end:{line:49,column:68}},"19":{start:{line:50,column:4},end:{line:50,column:38}},"20":{start:{line:52,column:8},end:{line:52,column:78}},"21":{start:{line:53,column:8},end:{line:53,column:25}},"22":{start:{line:61,column:25},end:{line:71,column:1}},"23":{start:{line:62,column:4},end:{line:70,column:5}},"24":{start:{line:63,column:13},end:{line:63,column:29}},"25":{start:{line:65,column:23},end:{line:65,column:78}},"26":{start:{line:67,column:4},end:{line:67,column:87}},"27":{start:{line:69,column:8},end:{line:69,column:25}},"28":{start:{line:74,column:25},end:{line:83,column:1}},"29":{start:{line:75,column:4},end:{line:82,column:5}},"30":{start:{line:76,column:13},end:{line:76,column:29}},"31":{start:{line:78,column:4},end:{line:78,column:51}},"32":{start:{line:79,column:4},end:{line:79,column:87}},"33":{start:{line:81,column:8},end:{line:81,column:25}},"34":{start:{line:85,column:0},end:{line:91,column:2}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:6,column:22},end:{line:6,column:23}},loc:{start:{line:6,column:48},end:{line:31,column:1}},line:6},"1":{name:"(anonymous_1)",decl:{start:{line:34,column:26},end:{line:34,column:27}},loc:{start:{line:34,column:46},end:{line:42,column:1}},line:34},"2":{name:"(anonymous_2)",decl:{start:{line:45,column:25},end:{line:45,column:26}},loc:{start:{line:45,column:45},end:{line:55,column:1}},line:45},"3":{name:"(anonymous_3)",decl:{start:{line:61,column:25},end:{line:61,column:26}},loc:{start:{line:61,column:45},end:{line:71,column:1}},line:61},"4":{name:"(anonymous_4)",decl:{start:{line:74,column:25},end:{line:74,column:26}},loc:{start:{line:74,column:45},end:{line:83,column:1}},line:74}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"57ee56f7eb714308d144f6377ef2a37fb166290c"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1dbsadu8gt=function(){return actualCoverage;};}return actualCoverage;}cov_1dbsadu8gt();const db=(cov_1dbsadu8gt().s[0]++,require('../models/index'));const MutualFund=(cov_1dbsadu8gt().s[1]++,db.MutualFunds);//C
cov_1dbsadu8gt().s[2]++;const addMutualFund=async(req,res,next)=>{cov_1dbsadu8gt().f[0]++;cov_1dbsadu8gt().s[3]++;try{let input_data=(cov_1dbsadu8gt().s[4]++,{fundName:req.body.fundName,symbol:req.body.symbol,yTD:req.body.yTD,yearOne:req.body.yearOne,yearThree:req.body.yearThree,yearFive:req.body.yearFive,yearTen:req.body.yearTen,inceptionDate:req.body.inceptionDate,inceptionRate:req.body.inceptionRate,expenseRatio:req.body.expenseRatio,nAV:req.body.nAV,risk:req.body.risk,minimum:req.body.minimum// topHoldings: req.body.topHoldings
});cov_1dbsadu8gt().s[5]++;console.log("My input data is",input_data);const mutualFund=(cov_1dbsadu8gt().s[6]++,await MutualFund.create(input_data));cov_1dbsadu8gt().s[7]++;res.status(201).send(mutualFund);}catch(err){cov_1dbsadu8gt().s[8]++;console.log(err);}};//R ALL
cov_1dbsadu8gt().s[9]++;const getAllMutualFunds=async(req,res)=>{cov_1dbsadu8gt().f[1]++;cov_1dbsadu8gt().s[10]++;try{let mutualFunds=(cov_1dbsadu8gt().s[11]++,await MutualFund.findAll({}));cov_1dbsadu8gt().s[12]++;res.status(200).send(mutualFunds);}catch(err){cov_1dbsadu8gt().s[13]++;res.status(404).send("Mutual Funds NOT found");cov_1dbsadu8gt().s[14]++;console.log(err);}};//R
cov_1dbsadu8gt().s[15]++;const getOneMutualFund=async(req,res)=>{cov_1dbsadu8gt().f[2]++;cov_1dbsadu8gt().s[16]++;try{let id=(cov_1dbsadu8gt().s[17]++,req.params.mf_id);let mutualFunds=(cov_1dbsadu8gt().s[18]++,await MutualFund.findOne({where:{mf_id:id}}));cov_1dbsadu8gt().s[19]++;res.status(200).send(mutualFunds);}catch(err){cov_1dbsadu8gt().s[20]++;res.status(404).send(`Mutual Fund with the id of ${mf_id} NOT found`);cov_1dbsadu8gt().s[21]++;console.log(err);}};//??? why is update have a const and why does read one return mutualFunds?
//-- look up async and await
//U
cov_1dbsadu8gt().s[22]++;const updateMutualFund=async(req,res)=>{cov_1dbsadu8gt().f[3]++;cov_1dbsadu8gt().s[23]++;try{let id=(cov_1dbsadu8gt().s[24]++,req.params.mf_id);const mutualFund=(cov_1dbsadu8gt().s[25]++,await MutualFund.update(req.body,{where:{mf_id:id}}));// res.status(200).send(mutualFund);
cov_1dbsadu8gt().s[26]++;res.status(200).send(`The Mutual Fund with the mf_id of: ${id} has been updated.`);}catch(err){cov_1dbsadu8gt().s[27]++;console.log(err);}};//D
cov_1dbsadu8gt().s[28]++;const deleteMutualFund=async(req,res)=>{cov_1dbsadu8gt().f[4]++;cov_1dbsadu8gt().s[29]++;try{let id=(cov_1dbsadu8gt().s[30]++,req.params.mf_id);cov_1dbsadu8gt().s[31]++;await MutualFund.destroy({where:{mf_id:id}});cov_1dbsadu8gt().s[32]++;res.status(200).send(`The Mutual Fund with the mf_id of: ${id} has been deleted.`);}catch(err){cov_1dbsadu8gt().s[33]++;console.log(err);}};cov_1dbsadu8gt().s[34]++;module.exports={addMutualFund,getAllMutualFunds,getOneMutualFund,updateMutualFund,deleteMutualFund};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
function cov_ej4kz410r(){var path="C:\\Users\\SParker\\projects\\Capstone\\mutualFundsService\\models\\mutualFundModel.js";var hash="9bda9a476ad7fa68555f084f0b8bf7e29c2ecf14";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\SParker\\projects\\Capstone\\mutualFundsService\\models\\mutualFundModel.js",statementMap:{"0":{start:{line:2,column:0},end:{line:70,column:1}},"1":{start:{line:5,column:23},end:{line:68,column:6}},"2":{start:{line:69,column:4},end:{line:69,column:22}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:2,column:17},end:{line:2,column:18}},loc:{start:{line:2,column:43},end:{line:70,column:1}},line:2}},branchMap:{},s:{"0":0,"1":0,"2":0},f:{"0":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"9bda9a476ad7fa68555f084f0b8bf7e29c2ecf14"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_ej4kz410r=function(){return actualCoverage;};}return actualCoverage;}cov_ej4kz410r();cov_ej4kz410r().s[0]++;//inputs: sequelize instance and DT Class, returns: a mutualFund Model object
module.exports=(sequelize,DataTypes)=>{cov_ej4kz410r().f[0]++;//modelName is 'mutualFund'(first argument of the define() function and adds a "s" for the table name once synced)
const MutualFund=(cov_ej4kz410r().s[1]++,sequelize.define('mutualFund',{mf_id:{type:DataTypes.INTEGER,autoIncrement:true,allowNull:false,primaryKey:true},fundName:{type:DataTypes.STRING,//standard is varchar(255)
allowNull:false},symbol:{type:DataTypes.STRING,stringallowNull:false},yTD:{type:DataTypes.DECIMAL(3,2),allowNull:false},yearOne:{type:DataTypes.DECIMAL(3,2),allowNull:false},yearThree:{type:DataTypes.DECIMAL(3,2),allowNull:false},yearFive:{type:DataTypes.DECIMAL(3,2),allowNull:false},yearTen:{type:DataTypes.DECIMAL(3,2),allowNull:true},inceptionDate:{type:DataTypes.STRING,allowNull:false},inceptionRate:{type:DataTypes.DECIMAL(3,2),allowNull:false},expenseRatio:{type:DataTypes.DECIMAL(3,2),allowNull:false},nAV:{type:DataTypes.DECIMAL(4,2),allowNull:false},risk:{type:DataTypes.INTEGER,allowNull:false},minimum:{type:DataTypes.INTEGER,allowNull:false}// topHoldings: {
//     type: DataTypes.ARRAY(DataTypes.STRING),
//     allowNull: false
// }
}));cov_ej4kz410r().s[2]++;return MutualFund;};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm11dHVhbEZ1bmRNb2RlbC5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic2VxdWVsaXplIiwiRGF0YVR5cGVzIiwiTXV0dWFsRnVuZCIsImRlZmluZSIsIm1mX2lkIiwidHlwZSIsIklOVEVHRVIiLCJhdXRvSW5jcmVtZW50IiwiYWxsb3dOdWxsIiwicHJpbWFyeUtleSIsImZ1bmROYW1lIiwiU1RSSU5HIiwic3ltYm9sIiwic3RyaW5nYWxsb3dOdWxsIiwieVREIiwiREVDSU1BTCIsInllYXJPbmUiLCJ5ZWFyVGhyZWUiLCJ5ZWFyRml2ZSIsInllYXJUZW4iLCJpbmNlcHRpb25EYXRlIiwiaW5jZXB0aW9uUmF0ZSIsImV4cGVuc2VSYXRpbyIsIm5BViIsInJpc2siLCJtaW5pbXVtIl0sIm1hcHBpbmdzIjoiZytCQWVZO2dIQWZaO0FBQ0FBLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQixDQUFDQyxTQUFELENBQVlDLFNBQVosR0FBMEIsd0JBRXZDO0FBQ0EsS0FBTUMsQ0FBQUEsVUFBVSx5QkFBR0YsU0FBUyxDQUFDRyxNQUFWLENBQWlCLFlBQWpCLENBQStCLENBQzlDQyxLQUFLLENBQUUsQ0FDSEMsSUFBSSxDQUFFSixTQUFTLENBQUNLLE9BRGIsQ0FFSEMsYUFBYSxDQUFFLElBRlosQ0FHSEMsU0FBUyxDQUFFLEtBSFIsQ0FJSEMsVUFBVSxDQUFFLElBSlQsQ0FEdUMsQ0FPOUNDLFFBQVEsQ0FBRSxDQUNOTCxJQUFJLENBQUVKLFNBQVMsQ0FBQ1UsTUFEVixDQUNxQjtBQUMzQkgsU0FBUyxDQUFFLEtBRkwsQ0FQb0MsQ0FXOUNJLE1BQU0sQ0FBRSxDQUNKUCxJQUFJLENBQUVKLFNBQVMsQ0FBQ1UsTUFEWixDQUVKRSxlQUFlLENBQUUsS0FGYixDQVhzQyxDQWU5Q0MsR0FBRyxDQUFFLENBQ0RULElBQUksQ0FBRUosU0FBUyxDQUFDYyxPQUFWLENBQWtCLENBQWxCLENBQXFCLENBQXJCLENBREwsQ0FFRFAsU0FBUyxDQUFFLEtBRlYsQ0FmeUMsQ0FtQjlDUSxPQUFPLENBQUUsQ0FDTFgsSUFBSSxDQUFFSixTQUFTLENBQUNjLE9BQVYsQ0FBa0IsQ0FBbEIsQ0FBcUIsQ0FBckIsQ0FERCxDQUVMUCxTQUFTLENBQUUsS0FGTixDQW5CcUMsQ0F1QjlDUyxTQUFTLENBQUUsQ0FDUFosSUFBSSxDQUFFSixTQUFTLENBQUNjLE9BQVYsQ0FBa0IsQ0FBbEIsQ0FBcUIsQ0FBckIsQ0FEQyxDQUVQUCxTQUFTLENBQUUsS0FGSixDQXZCbUMsQ0EyQjlDVSxRQUFRLENBQUUsQ0FDTmIsSUFBSSxDQUFFSixTQUFTLENBQUNjLE9BQVYsQ0FBa0IsQ0FBbEIsQ0FBcUIsQ0FBckIsQ0FEQSxDQUVOUCxTQUFTLENBQUUsS0FGTCxDQTNCb0MsQ0ErQjlDVyxPQUFPLENBQUUsQ0FDTGQsSUFBSSxDQUFFSixTQUFTLENBQUNjLE9BQVYsQ0FBa0IsQ0FBbEIsQ0FBcUIsQ0FBckIsQ0FERCxDQUVMUCxTQUFTLENBQUUsSUFGTixDQS9CcUMsQ0FtQzlDWSxhQUFhLENBQUUsQ0FDWGYsSUFBSSxDQUFFSixTQUFTLENBQUNVLE1BREwsQ0FFWEgsU0FBUyxDQUFFLEtBRkEsQ0FuQytCLENBdUM5Q2EsYUFBYSxDQUFFLENBQ1hoQixJQUFJLENBQUVKLFNBQVMsQ0FBQ2MsT0FBVixDQUFrQixDQUFsQixDQUFxQixDQUFyQixDQURLLENBRVhQLFNBQVMsQ0FBRSxLQUZBLENBdkMrQixDQTJDOUNjLFlBQVksQ0FBRSxDQUNWakIsSUFBSSxDQUFFSixTQUFTLENBQUNjLE9BQVYsQ0FBa0IsQ0FBbEIsQ0FBcUIsQ0FBckIsQ0FESSxDQUVWUCxTQUFTLENBQUUsS0FGRCxDQTNDZ0MsQ0ErQzlDZSxHQUFHLENBQUUsQ0FDRGxCLElBQUksQ0FBRUosU0FBUyxDQUFDYyxPQUFWLENBQWtCLENBQWxCLENBQXFCLENBQXJCLENBREwsQ0FFRFAsU0FBUyxDQUFFLEtBRlYsQ0EvQ3lDLENBbUQ5Q2dCLElBQUksQ0FBRSxDQUNGbkIsSUFBSSxDQUFFSixTQUFTLENBQUNLLE9BRGQsQ0FFRkUsU0FBUyxDQUFFLEtBRlQsQ0FuRHdDLENBdUQ5Q2lCLE9BQU8sQ0FBRSxDQUNMcEIsSUFBSSxDQUFFSixTQUFTLENBQUNLLE9BRFgsQ0FFTEUsU0FBUyxDQUFFLEtBRk4sQ0FJVDtBQUNBO0FBQ0E7QUFDQTtBQTlEOEMsQ0FBL0IsQ0FBSCxDQUFoQixDQUh1Qyx1QkFtRXZDLE1BQU9OLENBQUFBLFVBQVAsQ0FDSCxDQXBFRCIsInNvdXJjZXNDb250ZW50IjpbIi8vaW5wdXRzOiBzZXF1ZWxpemUgaW5zdGFuY2UgYW5kIERUIENsYXNzLCByZXR1cm5zOiBhIG11dHVhbEZ1bmQgTW9kZWwgb2JqZWN0XHJcbm1vZHVsZS5leHBvcnRzID0gKHNlcXVlbGl6ZSwgRGF0YVR5cGVzKSA9PiB7XHJcblxyXG4gICAgLy9tb2RlbE5hbWUgaXMgJ211dHVhbEZ1bmQnKGZpcnN0IGFyZ3VtZW50IG9mIHRoZSBkZWZpbmUoKSBmdW5jdGlvbiBhbmQgYWRkcyBhIFwic1wiIGZvciB0aGUgdGFibGUgbmFtZSBvbmNlIHN5bmNlZClcclxuICAgIGNvbnN0IE11dHVhbEZ1bmQgPSBzZXF1ZWxpemUuZGVmaW5lKCdtdXR1YWxGdW5kJywge1xyXG4gICAgICAgIG1mX2lkOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IERhdGFUeXBlcy5JTlRFR0VSLFxyXG4gICAgICAgICAgICBhdXRvSW5jcmVtZW50OiB0cnVlLFxyXG4gICAgICAgICAgICBhbGxvd051bGw6IGZhbHNlLFxyXG4gICAgICAgICAgICBwcmltYXJ5S2V5OiB0cnVlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBmdW5kTmFtZToge1xyXG4gICAgICAgICAgICB0eXBlOiBEYXRhVHlwZXMuU1RSSU5HLCAgICAvL3N0YW5kYXJkIGlzIHZhcmNoYXIoMjU1KVxyXG4gICAgICAgICAgICBhbGxvd051bGw6IGZhbHNlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzeW1ib2w6IHtcclxuICAgICAgICAgICAgdHlwZTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgICAgICAgICAgc3RyaW5nYWxsb3dOdWxsOiBmYWxzZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeVREOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IERhdGFUeXBlcy5ERUNJTUFMKDMsIDIpLFxyXG4gICAgICAgICAgICBhbGxvd051bGw6IGZhbHNlXHJcbiAgICAgICAgfSxcclxuICAgICAgICB5ZWFyT25lOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IERhdGFUeXBlcy5ERUNJTUFMKDMsIDIpLFxyXG4gICAgICAgICAgICBhbGxvd051bGw6IGZhbHNlXHJcbiAgICAgICAgfSxcclxuICAgICAgICB5ZWFyVGhyZWU6IHtcclxuICAgICAgICAgICAgdHlwZTogRGF0YVR5cGVzLkRFQ0lNQUwoMywgMiksXHJcbiAgICAgICAgICAgIGFsbG93TnVsbDogZmFsc2VcclxuICAgICAgICB9LFxyXG4gICAgICAgIHllYXJGaXZlOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IERhdGFUeXBlcy5ERUNJTUFMKDMsIDIpLFxyXG4gICAgICAgICAgICBhbGxvd051bGw6IGZhbHNlXHJcbiAgICAgICAgfSxcclxuICAgICAgICB5ZWFyVGVuOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IERhdGFUeXBlcy5ERUNJTUFMKDMsIDIpLFxyXG4gICAgICAgICAgICBhbGxvd051bGw6IHRydWVcclxuICAgICAgICB9LFxyXG4gICAgICAgIGluY2VwdGlvbkRhdGU6IHtcclxuICAgICAgICAgICAgdHlwZTogRGF0YVR5cGVzLlNUUklORyxcclxuICAgICAgICAgICAgYWxsb3dOdWxsOiBmYWxzZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW5jZXB0aW9uUmF0ZToge1xyXG4gICAgICAgICAgICB0eXBlOiBEYXRhVHlwZXMuREVDSU1BTCgzLCAyKSxcclxuICAgICAgICAgICAgYWxsb3dOdWxsOiBmYWxzZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXhwZW5zZVJhdGlvOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IERhdGFUeXBlcy5ERUNJTUFMKDMsIDIpLFxyXG4gICAgICAgICAgICBhbGxvd051bGw6IGZhbHNlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBuQVY6IHtcclxuICAgICAgICAgICAgdHlwZTogRGF0YVR5cGVzLkRFQ0lNQUwoNCwgMiksXHJcbiAgICAgICAgICAgIGFsbG93TnVsbDogZmFsc2VcclxuICAgICAgICB9LCBcclxuICAgICAgICByaXNrOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IERhdGFUeXBlcy5JTlRFR0VSLFxyXG4gICAgICAgICAgICBhbGxvd051bGw6IGZhbHNlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBtaW5pbXVtOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IERhdGFUeXBlcy5JTlRFR0VSLFxyXG4gICAgICAgICAgICBhbGxvd051bGw6IGZhbHNlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHRvcEhvbGRpbmdzOiB7XHJcbiAgICAgICAgLy8gICAgIHR5cGU6IERhdGFUeXBlcy5BUlJBWShEYXRhVHlwZXMuU1RSSU5HKSxcclxuICAgICAgICAvLyAgICAgYWxsb3dOdWxsOiBmYWxzZVxyXG4gICAgICAgIC8vIH1cclxuICAgIH0pXHJcbiAgICByZXR1cm4gTXV0dWFsRnVuZDtcclxufSJdfQ==